{
module Parser  where
import Lexer
}

%name parse
%tokentype { Token }
%error { parseError }

%token
    BOOLEAN {BOOLEAN}
    BREAK  {BREAK}
    CASE  {CASE}
    CHAR   {CHAR}
    CLASS {CLASS}
    CONTINUE  {CONTINUE}
    DO  {DO}
    ELSE  {ELSE}
    FOR  {FOR}
    IF  {IF}
    INSTANCEOF  {INSTANCEOF}
    INT {INT}
    NEW {NEW}
    PRIVATE {PRIVATE}
    PROTECTED  {PROTECTED}
    PUBLIC  {PUBLIC}
    RETURN  {RETURN}
    STATIC  {STATIC}
    SWITCH  {SWITCH}
    THIS  {THIS}
    VOID  {VOID}
    WHILE  {WHILE}
    INTLITERAL {INTLITERAL $$}
    BOOLLITERAL {BOOLLITERAL $$}
    JNULL  {JNULL}
    CHARLITERAL {CHARLITERAL $$}
    STRINGLITERAL {STRINGLITERAL $$}
    IDENTIFIER {IDENTIFIER $$}
    EQUAL  {EQUAL}
    LESSEQUAL  {LESSEQUAL}
    GREATEREQUAL  {GREATEREQUAL}
    NOTEQUAL  {NOTEQUAL}
    LOGICALOR  {LOGICALOR}
    LOGICALAND  {LOGICALAND}
    INCREMENT  {INCREMENT}
    DECREMENT  {DECREMENT}
    SHIFTLEFT  {SHIFTLEFT}
    SHIFTRIGHT  {SHIFTRIGHT}
    UNSIGNEDSHIFTRIGHT  {UNSIGNEDSHIFTRIGHT}
    SIGNEDSHIFTRIGHT  {SIGNEDSHIFTRIGHT}
    PLUSEQUAL  {PLUSEQUAL}
    MINUSEQUAL  {MINUSEQUAL}
    TIMESEQUAL  {TIMESEQUAL}
    DIVIDEEQUAL  {DIVIDEEQUAL}
    ANDEQUAL  {ANDEQUAL}
    OREQUAL  {OREQUAL}
    XOREQUAL  {XOREQUAL}
    MODULOEQUAL  {MODULOEQUAL}
    SHIFTLEFTEQUAL  {SHIFTLEFTEQUAL}
    SIGNEDSHIFTRIGHTEQUAL  {SIGNEDSHIFTRIGHTEQUAL}
    UNSIGNEDSHIFTRIGHTEQUAL  {UNSIGNEDSHIFTRIGHTEQUAL}
    LBRACE {LBRACE}
    RBRACE {RBRACE}
    LBRACKET  {LBRACKET}
    RBRACKET  {RBRACKET}
    LSQBRACKET  {LSQBRACKET}
    RSQBRACKET  {RSQBRACKET}
    SEMICOLON  {SEMICOLON}
    DOT  {DOT}
    ASSIGN  {ASSIGN}
    LESS  {LESS}
    GREATER  {GREATER}
    EXCLMARK  {EXCLMARK}
    TILDE  {TILDE}
    QUESMARK  {QUESMARK}
    COLON  {COLON}
    PLUS  {PLUS}
    MINUS  {MINUS}
    MUL  {MUL}
    DIV  {DIV}
    MOD  {MOD}
    AND  {AND}
    OR  {OR}
    XOR  {XOR}
    SHARP {SHARP}
    ARROW {ARROW}
%%

{
    parseError :: [Token] -> a
    parseError _ = error "Parse error"
}